<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="author" content="Jan G. Wieners">
    <meta name="description" content="SpoookyJS - Ein multiagentenbasiertes JavaScript-Framework zur Implementation browserbasierter Brettspiele und spielübergreifender künstlicher Intelligenz">

    <title>SpoookyJS</title>

    <link rel="shortcut icon" href="img/favicon.ico">

    <link href="css/bootstrap.min.css" rel="stylesheet" type="text/css">
    <link href="css/prettify.css" rel="stylesheet" type="text/css">
    <script src="js/libs/jquery.min.js"></script>

    <script src="js/libs/prettify.js"></script>

    <script type="text/javascript">
        !function ($) {
            $(function(){
                window.prettyPrint && prettyPrint()
            })
        }(window.jQuery)
    </script>

    <link href="css/startstyle.css" rel="stylesheet" type="text/css">

</head>

<body id="page-top" data-spy="scroll" data-target="spoookynavbar">

    <div class="navbar navbar-default navbar-fixed-top" role="navigation">

        <div class="container">

            <div class="navbar-header page-scroll">

                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".spoookynavbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#page-top">
                    <img id="logoghost" src="img/spoooky-ghost_flat.png" alt="Spoooky Logo"> SpoookyJS
                </a>

            </div>

            <!-- Collect the nav links, forms, and other content for toggling -->
            <div id="spoookynavbar" class="collapse navbar-collapse navbar-right navbar-main-collapse">

                <ul class="nav navbar-nav">

                    <!-- Hidden li included to remove active class from about link when scrolled up past about section -->
                    <li class="hidden">
                        <a href="#page-top"></a>
                    </li>

                    <li class="dropdown page-scroll">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                            Spiele<b class="caret"></b>
                        </a>
                        <ul class="dropdown-menu" role="menu">
                            <li><a href="games/amazons/index.htm">Amazons</a></li>
                            <li><a href="games/backgammon/index.htm">Backgammon</a></li>
                            <li><a href="games/checkers/index.htm">Dame</a></li>
                            <li><a href="games/gomoku9x9/index.htm">Gomoku 9x9</a></li>
                            <li><a href="games/gomoku15x15/index.htm">Gomoku 15x15</a></li>
                            <li><a href="games/chess/index.htm">Schach</a></li>
                            <li><a href="games/chessvariant/index.htm">Schachvariante 5x6 (Tutorial)</a></li>
                            <li><a href="games/tictactoe/index.htm">Tic Tac Toe</a></li>
                            <li><a href="#games"></a></li>
                        </ul>
                    </li>

                    <li class="page-scroll">
                        <a href="#about">Über SpoookyJS</a>
                    </li>

                    <li class="page-scroll">
                        <a href="#download">Download</a>
                    </li>

                    <li>
                        <a href="tutorials/index.htm">Tutorial</a>
                    </li>

                    <li>
                        <a href="docs/index.html">API</a>
                    </li>

                    <li class="page-scroll">
                        <a href="#contact">Impressum</a>
                    </li>

                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container -->
    </div>

    <section class="intro">

        <div class="intro-body">
            <div class="container">
                <div class="row">

                    <div class="col-md-10">

                        <h1 class="brand-heading">SpoookyJS</h1>
                        <p class="intro-text">
                            Ein multiagentenbasiertes JavaScript-Framework zur Implementation browserbasierter Brettspiele und spielübergreifender künstlicher Intelligenz
                        </p>
                        <div class="page-scroll" style="text-align: center">
                            <a href="#games" class="btn btn-circle page-scroll glyphicon glyphicon-arrow-down">
                            </a>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </section>

    <section id="games" class="content-section">
        <div class="games-section">
            <div class="container">

                <div class="row">

                    <div class="col-md-6 col-md-offset-3">
                        <h2>Lust auf eine Partie Tic Tac Toe?</h2>
                        <div class="linedivider"></div>
                        Einige Spiele und Spielvariationen wurden bereits mit SpoookyJS umgesetzt - Spiele wie <a href="games/tictactoe/index.htm">Tic Tac Toe</a>,
                        <a href="games/checkers/index.htm">Dame</a>,
                        <a href="games/chess/index.htm">Schach</a>,
                        <a href="games/backgammon/index.htm">Backgammon</a>,
                        <a href="games/gomoku15x15/index.htm">Gomoku</a> oder das
                        <a href="games/amazons/index.htm">Spiel der Amazonen</a>.
                    </div>

                </div>

                <div class="row" style="margin-top: 25px;">

                    <div class="col-md-3 col-md-offset-3 ">
                        <a href="games/tictactoe/index.htm">
                            <img class="img-responsive" src="img/frontpage/tictactoe.png" alt="Tic Tac Toe">
                        </a>
                    </div>
                    <div class="col-md-3">
                        <a href="games/checkers/index.htm">
                            <img class="img-responsive" src="img/frontpage/checkers.png" alt="Dame">
                        </a>
                    </div>

                </div>

            </div>
        </div>
    </section>

    <section id="about" class="container content-section">

        <div class="row">

        <div class="col-md-5 vcenter">
            <h2>Einfache Spielerstellung</h2>
            <div class="linedivider"></div>
            Mit SpoookyJS lassen sich browserbasierte Spiele ganz einfach erstellen. Dazu braucht's einzig das aktuelle <a href="#download">Downloadpaket</a> des Frameworks - und eine gute Portion JavaScript.
            Wie die Spielerstellung mit SpoookyJS funktioniert, darüber informieren die <a href="tutorials/index.htm">Tutorials</a>.
        </div>

        <div class="col-md-5 col-md-offset-1 vcenter">
        <pre class="prettyprint linenums" style="height: 300px;">
// ************************************************* //
// *** Game Definition (games/tictactoe/game.js) *** //
// ************************************************* //

// Create a new SpoookyJS game
var game = new Spoooky.Game;

game.initialize("Tic Tac Toe");

game.setDescription("Auf einem quadratischen, 3×3 Felder großen Spielfeld setzen die beiden Spieler " +
    "abwechselnd ihr Zeichen auf ein freies Feld. Der Spieler, der als Erster drei Zeichen " +
    "in eine Zeile, Spalte oder Diagonale setzen kann, gewinnt.");

game.setGameMode("PLACING");

// Setup Meta Entities
var player1 = game.createPlayer({
    name: "Jan",
    type: "HUMAN"
});

var player2 = game.createPlayer({
    name: "Scully",
    type: "ARTIFICIAL"
});

// Enable active learning of the agent
//player2.enableLearning();

var w = "gridCellWhiteWithBorder";

// Create the game board
game.setupGridWorld(3, 3, [
    w, w, w,
    w, w, w,
    w, w, w
]);

// Add entity blueprints to the game to use them ingame
var black = game.addBlueprint(player2, Spoooky.Blueprints.TICTACTOE.entities.black),
    white = game.addBlueprint(player1, Spoooky.Blueprints.TICTACTOE.entities.white);

game.addEntitiesToGameBoard([
    0, 0, 0,
    0, 0, 0,
    0, 0, 0
]);

// Set the player who will start the game
game.setPlayer(player1);

// Game goals for tic tac toe
// Player 1 has three entities in a row
game.addGameRuleAtom({
    atomName : "Player1: Three entities in a row",
    atomFunction : "Player Has Number Of Entities In Row",
    atomArguments : {
        number : 3,
        playerID : player1.getID(),
        entityID : white.typeID
    }
});

game.assembleGameRule({
    name     : "Player 1 has three entities in a row",
    atoms    : ["Player1: Three entities in a row"]
});

game.connectGameRuleConsequences({
    ruleName     : "Player 1 has three entities in a row",
    consequences : [{
        jobName: "Stop the Game",
        jobFunction: "Stop Game"
    }, {
        jobName: "Output winning Message for player 1",
        jobFunction: "Print Game Process",
        jobArguments: "Spieler 1 gewinnt!"
    }, {
        jobName: "Set the Winner of the Game",
        jobFunction: "Set Winner",
        jobArguments: player1.getID()
    }]});

// Player 1 has three entities in a column
game.addGameRuleAtom({
    atomName : "Player1: Three entities in a column",
    atomFunction : "Player Has Number Of Entities In Column",
    atomArguments : {
        number : 3,
        playerID : player1.getID(),
        entityID : white.typeID
    }
});

game.assembleGameRule({
    name     : "Player 1 has three entities in a column",
    atoms    : ["Player1: Three entities in a column"]
});

game.connectGameRuleConsequences({
    ruleName     : "Player 1 has three entities in a column",
    consequences : [{
        jobName: "Stop the Game",
        jobFunction: "Stop Game"
    }, {
        jobName: "Output winning Message for player 1",
        jobFunction: "Print Game Process",
        jobArguments: "Spieler 1 gewinnt!"
    }, {
        jobName: "Set the Winner of the Game",
        jobFunction: "Set Winner",
        jobArguments: player1.getID()
    }]});

// Player 1 has three entities diagonally
game.addGameRuleAtom({
    atomName : "Player1: Three entities diagonally",
    atomFunction : "Player Has Number Of Entities Diagonally",
    atomArguments : {
        number : 3,
        playerID : player1.getID(),
        entityID : white.typeID
    }
});

game.assembleGameRule({
    name     : "Player 1 has three entities diagonally",
    atoms    : ["Player1: Three entities diagonally"]
});

game.connectGameRuleConsequences({
    ruleName     : "Player 1 has three entities diagonally",
    consequences : [{
        jobName: "Stop the Game",
        jobFunction: "Stop Game"
    }, {
        jobName: "Output winning Message for player 1",
        jobFunction: "Print Game Process",
        jobArguments: "Spieler 1 gewinnt!"
    }, {
        jobName: "Set the Winner of the Game",
        jobFunction: "Set Winner",
        jobArguments: player1.getID()
    }]});

// Game Goals For Player 2
// Player 2 has three entities in a row
game.addGameRuleAtom({
    atomName : "Player2: Three entities in a row",
    atomFunction : "Player Has Number Of Entities In Row",
    atomArguments : {
        number : 3,
        playerID : player2.getID(),
        entityID : black.typeID
    }
});

game.assembleGameRule({
    name     : "Player 2 has three entities in a row",
    atoms    : ["Player2: Three entities in a row"]
});

game.connectGameRuleConsequences({
    ruleName     : "Player 2 has three entities in a row",
    consequences : [{
        jobName: "Stop the Game",
        jobFunction: "Stop Game"
    }, {
        jobName: "Output winning Message for player 2",
        jobFunction: "Print Game Process",
        jobArguments: "Spieler 2 gewinnt!"
    }, {
        jobName: "Set the Winner of the Game",
        jobFunction: "Set Winner",
        jobArguments: player2.getID()
    }]});

// Player 2 has three entities in a column
game.addGameRuleAtom({
    atomName : "Player2: Three entities in a column",
    atomFunction : "Player Has Number Of Entities In Column",
    atomArguments : {
        number : 3,
        playerID : player2.getID(),
        entityID : black.typeID
    }
});

game.assembleGameRule({
    name     : "Player 2 has three entities in a column",
    atoms    : ["Player2: Three entities in a column"]
});

game.connectGameRuleConsequences({
    ruleName     : "Player 2 has three entities in a column",
    consequences : [{
        jobName: "Stop the Game",
        jobFunction: "Stop Game"
    }, {
        jobName: "Output winning Message for player 2",
        jobFunction: "Print Game Process",
        jobArguments: "Spieler 2 gewinnt!"
    }, {
        jobName: "Set the Winner of the Game",
        jobFunction: "Set Winner",
        jobArguments: player2.getID()
    }]});

// Player 2 has three entities diagonally
game.addGameRuleAtom({
    atomName : "Player2: Three entities diagonally",
    atomFunction : "Player Has Number Of Entities Diagonally",
    atomArguments : {
        number : 3,
        playerID : player2.getID(),
        entityID : black.typeID
    }
});

game.assembleGameRule({
    name     : "Player 2 has three entities diagonally",
    atoms    : ["Player2: Three entities diagonally"]
});

game.connectGameRuleConsequences({
    ruleName     : "Player 2 has three entities diagonally",
    consequences : [{
        jobName: "Stop the Game",
        jobFunction: "Stop Game"
    }, {
        jobName: "Output winning Message for player 2",
        jobFunction: "Print Game Process",
        jobArguments: "Spieler 2 gewinnt!"
    }, {
        jobName: "Set the Winner of the Game",
        jobFunction: "Set Winner",
        jobArguments: player2.getID()
    }]});

// Draw rule
game.addGameRuleAtom({
    atomName : "Every Field Has Been Played",
    atomFunction : "No Empty Field On The Game Board"
});

game.addGameRuleAtom({
    atomName : "Game State is INGAME",
    atomFunction : "Game State Is",
    atomArguments : "INGAME"
});

game.assembleGameRule({
    name     : "Draw If Game Board Is Full",
    atoms    : ["Every Field Has Been Played",
        "Game State is INGAME"]
});

game.connectGameRuleConsequences({
    ruleName     : "Draw If Game Board Is Full",
    consequences : [{
        jobName: "Stop the Game",
        jobFunction: "Stop Game"
    }, {
        jobName: "Output Draw Message",
        jobFunction: "Print Game Process",
        jobArguments: "Unentschieden!"
    }]});

// ***************************** //
// *** Interface / AngularJS *** //
// ***************************** //
var SpoookyGame = new Spoooky.AngularWrapper({
    game : game,
    cellWidth : 165,
    cellHeight : 165 });</pre>
        </div>

        </div>

        <div class="row margintoprow">

            <div class="col-md-5 vcenter">
                <img src="img/frontpage/monte-carlo-tictactoe.jpg" class="img-responsive" alt="Monte Carlo Spielbaum im Tic Tac Toe Spiel">
            </div>

            <div class="col-md-5 col-md-offset-1 vcenter">
                <h2>Künstliche Intelligenz</h2>
                <div class="linedivider"></div>
                Für jedes Spiel, das mit SpoookyJS erstellt wird, stellt das Framework artifizielle Gegner bereit - out of the box.
                Die Entscheidungsfindung der künstlichen Spieler basiert auf dem Verfahren der Monte Carlo Spielbaumsuche.
            </div>

        </div>

        <div class="row margintoprow">

            <div class="col-md-5 vcenter">

                <h2>Multiagentensystem</h2>
                <div class="linedivider"></div>
                In SpoookyJS entscheidet nicht eine einzige künstliche Intelligenz über sinnvolle Züge, sondern ein Agentenensemble.
                Jeder Agent des Agententeams analysiert den aktuellen Spielzustand auf unterschiedliche Art und Weise und unterbreitet einem übergeordneten Meta Agenten
                Zugvorschläge.

            </div>

            <div class="col-md-5 col-md-offset-1 vcenter">
                <img src="img/frontpage/meta-agent-agentenensemble.jpg" class="img-responsive" alt="Agentenensemble">
            </div>

        </div>

        <div class="row margintoprow">

            <div class="col-md-5 vcenter">

                <img src="img/frontpage/mechanical-turk.jpg" class="img-responsive" alt="Kempelens Schachtürke">


            </div>

            <div class="col-md-5 col-md-offset-1 vcenter">
                <h2>Proof of Concept</h2>
                <div class="linedivider"></div>
                Künstliche Intelligenz in digitalen Spielen impliziert zumeist die Verwendung system- und hardwarenaher Programmiersprachen wie C++.
                SpoookyJS verfolgt den Ansatz einer Machbarkeitsstudie: Zwar sind die spielübergreifenden Gegner in SpoookyJS weit davon entfernt, gut - oder gar perfekt - zu spielen.
                Mit SpoookyJS steht jedoch ein wiederverwendbares Framework bereit, das Experimente um multiagentenbasierte künstliche Intelligenz in browserbasierten Spielen ermöglicht.
            </div>

        </div>

        <div class="row margintoprow">

            <div class="col-md-5 vcenter">

                <h2>Flexible Systemarchitektur</h2>
                <div class="linedivider"></div>
                SpoookyJS ist modular aufgebaut und intendiert die Wiederverwendbarkeit seiner Komponenten und Module.

            </div>

            <div class="col-md-5 col-md-offset-1 vcenter">
                <img src="img/frontpage/systemskizze.jpg" class="img-responsive" alt="Systemskizze SpoookyJS">
            </div>

        </div>

    </section>

    <section id="download" class="content-section">

        <div class="download-section vcenter">

            <div class="container">

                <a href="https://github.com/janwieners/SpoookyJS"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png"></a>

                <a href="https://github.com/janwieners/SpoookyJS/archive/master.zip">
                    <button type="button" class="btn btn-success btn-lg">

                        <div class="dwnheading">
                            Download SpoookyJS 0.3.15
                        </div>
                        <div class="dwntext">
                            "The Erlenmeyer Flask" (November 2014)
                            <br>
                            via GitHub
                        </div>
                    </button>
                </a>
                <br><br>
                <img src="img/spoooky-ghost_2.png" alt="spoooky ghost 1" width="35">
                <img src="img/spoooky-ghost_5.png" alt="spoooky ghost 1" width="35">
                <img src="img/spoooky-ghost_1.png" alt="spoooky ghost 1" width="35">
                <img src="img/spoooky-ghost_0.png" alt="spoooky ghost 1" width="35">
                <img src="img/spoooky-ghost_4.png" alt="spoooky ghost 1" width="35">

            </div>

        </div>

    </section>

    <section id="contact" class="container content-section">

        <div class="row">
            <div class="col-md-12">
                <h2>Kontakt und Impressum</h2>
                <div class="linedivider"></div>

                    SpoookyJS entstand im Rahmen der Dissertation "SpoookyJS - Ein multiagentenbasiertes JavaScript-Framework
                    zur flexiblen Implementation digitaler browserbasierter Spiele und spielübergreifender künstlicher Intelligenz"
                    am <a href="http://www.hki.uni-koeln.de">Institut für Historisch-Kulturwissenschaftliche Informationsverarbeitung</a> der Universität zu Köln.
                    <br><br>
                    Nach Veröffentlichung wird die Dissertation unter <a href="http://www.jan-wieners.de/dissertation">http://www.jan-wieners.de/dissertation</a> bereitgestellt.
                    <br><br>
                    Jan G. Wieners, Sülzburgstr., 50937 Köln, <a href="mailto:mail@spoookyjs.de">mail@spoookyjs.de</a>
                    <br>
                    <br>
                    &copy; 2012-2015 Jan G. Wieners

            </div>
        </div>

    </section>

    <!-- Core JavaScript Files -->
    <script src="js/libs/jquery.min.js"></script>
    <script src="js/libs/bootstrap.min.js"></script>
    <script src="js/libs/jquery.easing.min.js"></script>

    <script>

        // use jQuery to collapse the navbar on scroll
        $(window).scroll(function() {
            if ($(".navbar").offset().top > 50) {
                $(".navbar-fixed-top").addClass("top-nav-collapse");
            } else {
                $(".navbar-fixed-top").removeClass("top-nav-collapse");
            }
        });

        //jQuery for page scrolling feature - requires jQuery Easing plugin
        $(function() {

            $('.page-scroll a').bind('click', function(event) {

                var $anchor = $(this);

                $('html, body').stop().animate({
                    scrollTop: $($anchor.attr('href')).offset().top-50
                }, 1500, 'easeInOutExpo');

                event.preventDefault();
            });

        });

        $('body').scrollspy({ target: '#spoookynavbar', offset: 250 });
    </script>

</body>

</html>